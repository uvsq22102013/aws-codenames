generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./codenames.db"
}

enum StatutPartie {
  EN_ATTENTE
  EN_COURS
  TERMINEE
}

enum TypeCarte {
  ROUGE
  BLEU
  NEUTRE
  ASSASSIN
}

enum Role {
  MAITRE_ESPION
  AGENT
  INCONNU
}

enum TypeAction {
  INDICE
  SELECTION
  PASSER
  VALIDERSELECTION
}

enum Equipe {
  ROUGE
  BLEU
}

enum ChatChannel {
  GLOBAL
  EquipeROUGE
  EquipeBLEU
  ESPIONROUGE
  ESPIONBLEU
  ESPIONALL
}

model Utilisateur {
  id              Int      @id @default(autoincrement())
  pseudo          String   @unique
  email           String   @unique
  mdp_hash        String
  dateInscription DateTime @default(now())

  parties      Partie[]       @relation("UtilisateurParties")
  MembreEquipe MembreEquipe[]
  ActionJeu    ActionJeu[]
  Message      Message[]
  Selection    Selection[]
}

model Partie {
  id             String         @id
  statut         StatutPartie   @default(EN_ATTENTE)
  createurId     Int
  dateCreation   DateTime       @default(now())
  equipeEnCours  Equipe         @default(ROUGE)
  roleEncours    Role           @default(MAITRE_ESPION)
  langue         String         @default("fr")
  indice         Indice?        @relation(fields: [indiceId], references: [id])
  nbMotsRouge    Int            @default(9)
  nbMotsBleu     Int            @default(8)
  equipeGagnante Equipe?
  createur       Utilisateur    @relation(fields: [createurId], references: [id], onDelete: Cascade, name: "UtilisateurParties")
  messages       Message[]
  cartes         Carte[]
  actions        ActionJeu[]
  membres        MembreEquipe[]
  indiceId       Int?
}

model Indice {
  id                        Int          @id @default(autoincrement())
  createur                  MembreEquipe @relation(fields: [membreEquipeUtilisateurId, membreEquipePartieId], references: [utilisateurId, partieId])
  mot                       String
  nbmots                    Int
  membreEquipeUtilisateurId Int
  membreEquipePartieId      String

  Partie Partie[]
}

model MembreEquipe {
  utilisateurId Int
  partieId      String
  equipe        Equipe
  role          Role   @default(AGENT)

  utilisateur Utilisateur @relation(fields: [utilisateurId], references: [id], onDelete: Cascade)
  partie      Partie      @relation(fields: [partieId], references: [id], onDelete: Cascade)
  Indice      Indice[]

  @@id([utilisateurId, partieId])
}

model Mot {
  id     Int    @id @default(autoincrement())
  mot    String
  langue String @default("fr")

  cartes Carte[]

  @@unique([mot, langue])
}

model Selection {
  id            Int         @id @default(autoincrement())
  utilisateurId Int
  carteId       Int
  partieId      String
  utilisateur   Utilisateur @relation(fields: [utilisateurId], references: [id], onDelete: Cascade)
  carte         Carte       @relation(fields: [carteId], references: [id], onDelete: Cascade, name: "SelectionCarte") // Ajout d'un nom

  @@unique([utilisateurId, carteId])
}

model Carte {
  id               Int       @id @default(autoincrement())
  partieId         String
  motId            Int
  type             TypeCarte
  revelee          Boolean   @default(false)
  trouveeParEquipe Equipe? // ROUGE | BLEU -> Pour savoir si l'agent a trouv√© ce mot

  partie     Partie      @relation(fields: [partieId], references: [id], onDelete: Cascade)
  mot        Mot         @relation(fields: [motId], references: [id], onDelete: Cascade)
  actions    ActionJeu[] @relation("CarteActions")
  selections Selection[] @relation("SelectionCarte")
}

model ActionJeu {
  id            Int        @id @default(autoincrement())
  partieId      String
  utilisateurId Int
  equipe        Equipe
  typeAction    TypeAction
  motDonne      String? // Uniquement pour TypeAction.INDICE
  nombreMots    Int?
  carteId       Int? // Pour TypeAction.SELECTION
  resultat      String?
  dateAction    DateTime   @default(now())

  partie      Partie      @relation(fields: [partieId], references: [id], onDelete: Cascade)
  utilisateur Utilisateur @relation(fields: [utilisateurId], references: [id], onDelete: Cascade)
  carte       Carte?      @relation(fields: [carteId], references: [id], onDelete: Cascade, name: "CarteActions")
}

model Message {
  id            Int         @id @default(autoincrement())
  partieId      String
  utilisateurId Int
  contenu       String
  channel       ChatChannel
  pseudo        String
  dateMessage   DateTime    @default(now())

  partie      Partie      @relation(fields: [partieId], references: [id], onDelete: Cascade)
  utilisateur Utilisateur @relation(fields: [utilisateurId], references: [id], onDelete: Cascade)
}

model Reset {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  code      String   @unique
  createdAt DateTime @default(now())
}
